
To create a simple React app that connects to a weather API, you can follow these steps. I'll use the axios library for making HTTP requests.

Create a new React app:

bash
Copy code
npx create-react-app weather-app
cd weather-app
Install Axios:

bash
Copy code
npm install axios
Create a Weather component:

In the src folder, create a new component named Weather.js:

jsx
Copy code
import React, { useState } from 'react';
import axios from 'axios';

const Weather = () => {
  const [city, setCity] = useState('');
  const [weatherData, setWeatherData] = useState(null);

  const API_KEY = 'your_openweathermap_api_key';
  const API_URL = 'http://api.openweathermap.org/data/2.5/weather';

  const getWeather = async () => {
    try {
      const response = await axios.get(API_URL, {
        params: {
          q: city,
          appid: API_KEY,
        },
      });

      setWeatherData(response.data);
    } catch (error) {
      console.error('Error fetching weather data:', error);
    }
  };

  return (
    <div>
      <h1>Weather App</h1>
      <input
        type="text"
        placeholder="Enter city name"
        value={city}
        onChange={(e) => setCity(e.target.value)}
      />
      <button onClick={getWeather}>Get Weather</button>

      {weatherData && (
        <div>
          <h2>Weather for {weatherData.name}, {weatherData.sys.country}</h2>
          <p>Temperature: {weatherData.main.temp} K</p>
          <p>Weather: {weatherData.weather[0].description}</p>
        </div>
      )}
    </div>
  );
};

export default Weather;
Make sure to replace 'your_openweathermap_api_key' with the actual API key you obtained.

Use the Weather component in App.js:

Replace the content of src/App.js with the following:

jsx
Copy code
import React from 'react';
import Weather from './Weather';

function App() {
  return (
    <div className="App">
      <Weather />
    </div>
  );
}

export default App;
Run the app:

bash
Copy code
npm start
Open your browser and go to http://localhost:3000 to see the weather app.

This is a basic example, and you might want to improve error handling, add loading indicators, or enhance the UI. Additionally, consider using environment variables to store sensitive information like API keys.